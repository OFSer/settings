import os
from pygments.formatters import Terminal256Formatter
import pygments.formatters
from pygments.formatters import Terminal256Formatter
import cv2
import numpy
import cv2
cv2.__version__
[1,2,3]+[2,3,4]
a=[]
a+=[1,2,3]
a
a+=[2,3,4]
a
a += [1,2,3]
a
a = []
a += [1,2,3]
import .ycm_extra_conf.py
import flask
import json
import yaml
import flask
import time
import nnpy
import cffi
import nnpy
import json
path='/opt/flaw_checker/config/Device.json'
f=open(path, 'r')
d=json.load(f.read())
f.read()
f=open(path, 'r')
f.read()
f=open(path, 'r')
json.load(f)
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
import json
def update():
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
    blow=json.load(f2)
    config=json.load(f1)
    config["blows"] = blow
    f1.close()
    f2.close()
    d = json.loads(request.data)
update
update()
def update():
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
    blow=json.load(f2)
    config=json.load(f1)
    config["blows"] = blow
    f1.close()
    f2.close()
update()
import json
update()
path='/opt/flaw_checker/config/Device.json'
f1=open(path,'r')
config=json.load(f1)
f1.close()
f2.close()
ef update():
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
    blow=json.load(f2)
    config=json.load(f1)
    config["blows"] = blow
    f1.close()
def update():
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
    blow=json.load(f2)
    config=json.load(f1)
    config["blows"] = blow
    f1.close()
    f2.close()
update()
def update():
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
    blow=json.load(f2)
    config=json.load(f1)
    config["blows"] = blow
    f1.close()
    f2.close()
import json
def update():
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
    blow=json.load(f2)
    config=json.load(f1)
    config["blows"] = blow
    f1.close()
    f2.close()
update()
f2=open('json/blow.json', 'r')
blow=json.load(f2)
f2=open('json/blow.json', 'r')
blow=json.load(f2)
	config["blows"][arg1] = d[arg1]
def update():
    path='/opt/flaw_checker/config/Device.json'
    f1=open(path, 'r')
    f2=open('json/blow.json', 'r')
    blow=json.load(f2)
    config=json.load(f1)
    config["blows"] = blow
    f1.close()
    f2.close()
import json
update()
config
f2=open('json/blow.json', 'r')
blow=json.load(f2)
blow
f=open("test.json",w)
f=open("test.json","w")
f.write(blow)
f=open("test.json","w")
f.write(json.dump(blow))
f.write(json.dumps(blow))
json.dump(blow)
json.dump3(blow)
json.dumps(blow)
f.write(json.dumps(blow))
json.dump(blow,f)
path='/opt/flaw_checker/config/Device.json'
	config["blows"][arg1] = d[arg1]
f1=open(path, 'r')
import json
config=json.load(f1)
	config["blows"][arg1] = d[arg1]
config["blows"]
config["blows"]['transition_covariance']
config["blows"]
config["blows"][0]['transition_covariance']
import yaml
path='/opt/flaw_checker/config.yaml'
f1=open(path, 'r')
f2=open('yaml/blow.yaml', 'r')
blow=yaml.load(f2)
import yaml
blow=yaml.load(f2)
yaml.load_all(f2)
yaml.loader(f2)
f2=open('yaml/blow.yaml')
blow=yaml.load(f2)
path='/opt/flaw_checker/config.yaml'
f1=open(path)
f2=open('yaml/blow.yaml')
blow=yaml.load(f2)
blow
f1.close()
f2.close()
f1=open(path)
config=yaml.load(f1)
config
path='/opt/flaw_checker/config.yaml'
f1=open(path)
config=yaml.load(f1)
from ruamel import yaml
config=yaml.load(f1)
config
path='/opt/flaw_checker/config.yaml'
f1=open(path)
f2=open('yaml/blow.yaml')
f1.readline()
config=yaml.load(f1)
import yaml
config=yaml.load(f1)
config
f2=open('yaml/blow.yaml')
blow=yaml.load(f2)
blow
f=open(path)
yaml.dump(config,f)
f=open(path,'w')
import yaml
path='/opt/flaw_checker/config.yaml'
f1=open(path)
f2=open('yaml/blow.yaml')
f1.readline()
blow=yaml.load(f2)
config=yaml.safe_load(f1)
config
f=open(path,'w')
yaml.dump(config, f , default_flow_style=False)
f.close()
import cv2
import time
import cv2
import numpy as np
mtx = np.array([
    [ 7.49769538e+03, 0.00000000e+00, 1.85617813e+03],
    [ 0.00000000e+00, 7.49945151e+03, 1.30478448e+03],
    [0., 0., 1. ],
])
mtx
import numpy as np
np.array([[0,0],[0,-1],[1,-1],[1,0]]
np.array([[0,0],[0,-1],[1,-1],[1,0]])
import numpy as np
np.dot([1,2,3],[2,3,4])
np.matmul(([1,2,3],[2,3,4])
np.matmul([1,2,3],[2,3,4])
np.matmul([[1,2,3]],[[2,3,4]])
np.matmul([[1,2,3]],[[2],[3],[4]])
abs(-1)
L=[('b',2),('a',1),('c',3),('d',4)]
sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) 
sorted(L, lambda x,y:cmp(x[1],y[1])) 
sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) 
help(sorted)
sorted(L, cmp=lambda x,y:cmp(x[1],y[1])) 
L=[('b',2),('a',1),('c',3),('d',4)]
sorted(L,  functools.cmp_to_key(lambda x,y:cmp(x[1],y[1]))) 
import functools
sorted(L,  functools.cmp_to_key(lambda x,y:cmp(x[1],y[1]))) 
sorted(L,  key = functools.cmp_to_key(lambda x,y:cmp(x[1],y[1]))) 
sorted(L,  key = functools.cmp_to_key(lambda x,y:x[1] - y[1]))) 
sorted(L,  key = functools.cmp_to_key(lambda x,y:x[1] - y[1])) 
import numpy as np
a = np.array([1,2,3])
b = np.ones(3)
b
a = np.array([[1],[2],[3]])
np.hstack(a,b)
np.hstack((a,b))
np.vstack((a,b))
a = np.array([[1],[2],[3]])
b = np.array([[1],[1],[1]])
np.vstack((a,b))
np.hstack((a,b))
b = np.ones((3,1))
b
import numpy as np
a = np.array([[1],[2],[3]])
b = np.array([[1],[1],[1]])
np.hstack((a,b))
a = np.array([[1,1],[2,2],[3,3]])
np.hstack((a,b))
print(a)
a = np.array([[[1,1]],[[2,2]],[[3,3]]])
b = np.array([[[1]],[[1]],[[1]]])
np.hstack((a,b))
b = np.array([[1],[1],[1]])
np.hstack((a,b))
b = np.array([[[1]],[[1]],[[1]]])
a = np.array([[[1,1]],[[2,2]],[[3,3]]])
a
b
np.concatenate((a,b))
np.concatenate((a,b),0)
np.concatenate((a,b),1)
np.concatenate((a,b),2)
import cv2
help(cv2.calibrateCamera())
help(cv2.calibrateCamera)
help(cv2.calibrateCamera())
help(cv2.calibrateCamera)
import glob
glob.glob("7.24")
glob.glob("7.24/")
glob.glob("7.24/*")
glob.glob("7.24/*.bmp")
glob.glob("7-24/*.bmp")
import glob
glob.glob('7-24/*')
import cv2
a = cv2.imread("images/a.bmp")
cv2.imshow("1",a)
a = 'input/1/a.bmp'
a.split()
a.split('/')
a = 'input/1/a.bmp'
a[a.rfind('/'):]
a[a.find('/'):]
a[:a.rfind('/')]
a[a.rfind('/'):]
a[a.rfind('/')+1:]
zip([1,2,3],[2,3,4])
import json
payload = {'some': 'data'}
json.dumps(payload)
import sys
sys.readline()
sys.stdin.readline()
import sys
sys.stdin.readline().strip()
import json
json.dumps([[1,2,3]])
json.loads('[[1,2,3]]')
a = input()
1234
a
type(a)
[].append([1,2,3])
a = [].append([1,2,3])
a
print(a)
a = []
a = a.append([1,2,3])
a
a = a.append(1)
a = a.append([1])
a = [
a = []
a.append(1)
a
a.append([1])
a
a = []
a.append([1])
a
a = []
a.append([1,2,3])
a
import numpy
import ast
import os
